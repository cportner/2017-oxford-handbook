#     persp(xVarLevels, priceLevels, outLoess, col = myCol,
#           border = NA, theta = 50, phi = 30,
#           xlab = "Disagreeableness",
#           ylab = "Pay per HIT",
#           zlab = "Percent accept")
#     dev.off()
# }
# 3D graphs for Genova
# Begun.: 2016-07-20
# Edited: 2016-07-26
library(dplyr)
library(rgl)
library(plot3D)
library(extrafont)
font_install('fontcm')
# if fonts not recognized by pdf do loadfonts(device = "pdf")
# based on https://www.r-project.org/nosvn/pandoc/fontcm.html
require(mgcv)
# Some directories
dataDir <- "~/Dropbox/shared/compensating/data/genova"
resultDir <- "~/Dropbox/shared/compensating/data/genova/results"
genovaAll <- read.csv(file.path(dataDir,"study_9-final.csv"))
# Dropping unusable obs
# boo - does not work, simply drops obs genovaAll$run_length[genovaAll$first_time == "True"] <- genovaAll$run_length - 1
genovaAll$run_length <- ifelse(genovaAll$first_time == "True", genovaAll$run_length - 1, genovaAll$run_length)
genovaAll <- subset(genovaAll, genovaAll$run_length >= 0)
genovaAll <- subset(genovaAll, genovaAll$availability == "high")
# Outcomes and x vars
genovaAll$join <- ifelse(genovaAll$run_length > 0, 1, 0)
genovaAll$joinPlus <- ifelse(genovaAll$run_length > 1, 1, 0)
genovaAll$train    <- ifelse(genovaAll$training == "True", 1, 0)
genovaAll$accept   <- ifelse(genovaAll$improbability_rate == 93, 1, 0)
# Restrict to first day
genovaAll <- genovaAll[order(genovaAll$workerid, genovaAll$phase), ]
idgroup <- tapply(genovaAll$workerid, genovaAll$workerid, function(x) seq(1,length(x),1))
genovaAll$idgroup <- unlist(idgroup)
genova <- subset(genovaAll, idgroup == 1)
genova$idgroup <- NULL
myColors <- function(varName, color1, color2) {
# copied from example 4 in ?persp
nrz <- nrow(varName)
ncz <- ncol(varName)
# Create a function interpolating colors in the range of specified colors
jet.colors <- colorRampPalette( c(color1, color2) )
# Generate the desired number of colors from this palette
nbcol <- 100
color <- jet.colors(nbcol)
# Compute the z-value at the facet centres
zfacet <- varName[-1, -1] + varName[-1, -ncz] + varName[-nrz, -1] + varName[-nrz, -ncz]
# Recode facet z-values into color indices
facetcol <- cut(zfacet, nbcol)
return(color[facetcol])
}
# Start looping over variables from here
# Need to create a label for the variable used
byVars <- c("disagreeable", "train", "accept")
byVars.labels <- c("Disagreeableness", "Training", "Acceptance rate")
for (j in 1:length(byVars)) {
# Create dataframes for types
# need information on wage, disamentity level, and average outcome
# need this for disagreeable, training, improbability_rate
# probably many ways to do this, using dplyr
# two-step is to make var name look "pretty" and easy to use
genova$byVar <- get('genova')[[byVars[j]]]
df <- genova %>%
group_by(price, byVar) %>%
summarize(join     = mean(join),
joinPlus = mean(joinPlus),
avgHITs  = mean(run_length),
numHITs  = sum(run_length))
priceLevels <- sort(unique(df$price)) # need these for graphs and dimensions of matrix
xVarLevels  <- sort(unique(df$byVar))
# Static 3D plots
# annoyingly, all options seem to require z to be a matrix and x and y to be
# vectors of the relevant column/row numbers - here the price and disagreeable
# levels.
# matrix() can do this, but dim() may be faster
# Start looping over outcomes from here to end of file
outcomes <- c("join", "joinPlus", "avgHITs", "numHITs")
outcomes.labels <- c("Work (%)", "Work 2+ (%)", "Average HITs", "Number HITs")
for (i in 1:length(outcomes)) {
out <- get('df')[[outcomes[i]]]
dim(out) <- c(length(xVarLevels), length(priceLevels)) # disagreeable on row / price on columns
myCol <- myColors(out, "blue", "green")
pdf(file.path(resultDir, paste("plot3D-", byVars[j], "-", outcomes[i], ".pdf", sep = ""))
, family = "CM Roman",
width = 4.5, height = 5)
par(mar=c(2,2,2,2)+0.1) # bottom, left, top, right in lines
# persp(disagree, priceLevels, join, col = color[facetcol],
persp(xVarLevels, priceLevels, out, col = myCol,
border = NA, theta = 50, phi = 30,
xlab = byVars.labels[j],
ylab = "Pay per HIT",
zlab = outcomes.labels[i])
dev.off()
# gam and te lead to a lot of smoothing - trying loess as an alternative
modLoess <- loess(get(outcomes[i]) ~ price + byVar, span = 0.5, data = df)
outLoess <- matrix(fitted(modLoess), length(xVarLevels))
myCol <- myColors(outLoess, "blue", "green")
pdf(file.path(resultDir, paste("plot3D-", byVars[j], "-", outcomes[i], "-loess.pdf", sep = "")),
family = "CM Roman",
width = 4.5, height = 5)
par(mar=c(2,2,2,2)+0.1) # bottom, left, top, right in lines
persp(xVarLevels, priceLevels, outLoess, col = myCol,
border = NA, theta = 50, phi = 30,
xlab = byVars.labels[j],
ylab = "Pay per HIT",
zlab = outcomes.labels[i])
dev.off()
}
}
# Notes and other stuff
# RGL plot
#with(disagreeableJoin, plot3d(price, disagreeable, join), type=="s")
# Pretty, and interactive, but not easy to export
# persp3d(disagree, priceLevels, join, col = "green3")
# # Making a smoother version
# # Need to go back to original data to smooth
# # Based on http://stackoverflow.com/questions/20848740/smoothing-surface-plot-from-matrix
# mod <- gam(join ~ te(priceLevels, disagreeable), data = disagreeableJoin)
# joinMod <- matrix(fitted(mod), 6) # instead of the dim command above
# persp(disagree, priceLevels, joinMod, col = color[facetcol],
#       border = NA, theta = 50, phi = 30,
#       xlab = "Disagreeableness",
#       ylab = "Pay per HIT",
#       zlab = "Percent accept")
# # The below works fine, but does not allow for an easy way to do labels
# # Start looping over outcomes from here to end of file
# outcomes <- c("join", "joinPlus", "numHITs")
# outcomes.labels <- c("Work (%)", "Work 2+ (%)", "Number HITs")
# for (outcome in outcomes) {
#     out <- get('df')[[outcome]]
#     dim(out) <- c(6,10) # disagreeable on row / price on columns
#
#     priceLevels <- sort(unique(df$price))
#     xVarLevels  <- sort(unique(df$disagreeable))
#
#     # Static
#     myCol <- myColors(out, "blue", "green")
#
#     pdf(file.path(resultDir, paste("plot3D-disagreeable-", outcome, ".pdf", sep = ""))
#         , family = "CM Roman",
#         width = 4.5, height = 5)
#     par(mar=c(2,2,2,2)+0.1) # bottom, left, top, right in lines
#
#     # persp(disagree, priceLevels, join, col = color[facetcol],
#     persp(xVarLevels, priceLevels, out, col = myCol,
#           border = NA, theta = 50, phi = 30,
#           xlab = "Disagreeableness",
#           ylab = "Pay per HIT",
#           zlab = "Percent accept")
#     dev.off()
#
#     # gam and te lead to a lot of smoothing - trying loess as an alternative
#     modLoess <- loess(get(outcome) ~ price + disagreeable, span = 0.5, data = df)
#     outLoess <- matrix(fitted(modLoess), 6)
#
#     pdf(file.path(resultDir, paste("plot3D-disagreeable-", outcome, "-loess.pdf", sep = "")),
#         family = "CM Roman",
#         width = 4.5, height = 5)
#     par(mar=c(2,2,2,2)+0.1) # bottom, left, top, right in lines
#     persp(xVarLevels, priceLevels, outLoess, col = myCol,
#           border = NA, theta = 50, phi = 30,
#           xlab = "Disagreeableness",
#           ylab = "Pay per HIT",
#           zlab = "Percent accept")
#     dev.off()
# }
# 3D graphs for Genova
# Begun.: 2016-07-20
# Edited: 2016-07-26
library(dplyr)
library(rgl)
library(plot3D)
library(extrafont)
font_install('fontcm')
# if fonts not recognized by pdf do loadfonts(device = "pdf")
# based on https://www.r-project.org/nosvn/pandoc/fontcm.html
require(mgcv)
# Some directories
dataDir <- "~/Dropbox/shared/compensating/data/genova"
resultDir <- "~/Dropbox/shared/compensating/data/genova/results"
genovaAll <- read.csv(file.path(dataDir,"study_9-final.csv"))
# Dropping unusable obs
# boo - does not work, simply drops obs genovaAll$run_length[genovaAll$first_time == "True"] <- genovaAll$run_length - 1
genovaAll$run_length <- ifelse(genovaAll$first_time == "True", genovaAll$run_length - 1, genovaAll$run_length)
genovaAll <- subset(genovaAll, genovaAll$run_length >= 0)
genovaAll <- subset(genovaAll, genovaAll$availability == "high")
# Outcomes and x vars
genovaAll$join <- ifelse(genovaAll$run_length > 0, 1, 0)
genovaAll$joinPlus <- ifelse(genovaAll$run_length > 1, 1, 0)
genovaAll$train    <- ifelse(genovaAll$training == "True", 1, 0)
genovaAll$accept   <- ifelse(genovaAll$improbability_rate == 93, 1, 0)
# Restrict to first day
genovaAll <- genovaAll[order(genovaAll$workerid, genovaAll$phase), ]
idgroup <- tapply(genovaAll$workerid, genovaAll$workerid, function(x) seq(1,length(x),1))
genovaAll$idgroup <- unlist(idgroup)
genova <- subset(genovaAll, idgroup == 1)
genova$idgroup <- NULL
myColors <- function(varName, color1, color2) {
# copied from example 4 in ?persp
nrz <- nrow(varName)
ncz <- ncol(varName)
# Create a function interpolating colors in the range of specified colors
jet.colors <- colorRampPalette( c(color1, color2) )
# Generate the desired number of colors from this palette
nbcol <- 100
color <- jet.colors(nbcol)
# Compute the z-value at the facet centres
zfacet <- varName[-1, -1] + varName[-1, -ncz] + varName[-nrz, -1] + varName[-nrz, -ncz]
# Recode facet z-values into color indices
facetcol <- cut(zfacet, nbcol)
return(color[facetcol])
}
# Start looping over variables from here
# Need to create a label for the variable used
byVars <- c("disagreeable", "train", "accept")
byVars.labels <- c("Disagreeableness", "Training", "Acceptance rate")
for (j in 1:length(byVars)) {
# Create dataframes for types
# need information on wage, disamentity level, and average outcome
# need this for disagreeable, training, improbability_rate
# probably many ways to do this, using dplyr
# two-step is to make var name look "pretty" and easy to use
genova$byVar <- get('genova')[[byVars[j]]]
df <- genova %>%
group_by(price, byVar) %>%
summarize(join     = mean(join),
joinPlus = mean(joinPlus),
avgHITs  = mean(run_length),
numHITs  = sum(run_length))
priceLevels <- sort(unique(df$price)) # need these for graphs and dimensions of matrix
xVarLevels  <- sort(unique(df$byVar))
# Static 3D plots
# annoyingly, all options seem to require z to be a matrix and x and y to be
# vectors of the relevant column/row numbers - here the price and disagreeable
# levels.
# matrix() can do this, but dim() may be faster
# Start looping over outcomes from here to end of file
outcomes <- c("join", "joinPlus", "avgHITs", "numHITs")
outcomes.labels <- c("Work (%)", "Work 2+ (%)", "Average HITs", "Number HITs")
for (i in 1:length(outcomes)) {
out <- get('df')[[outcomes[i]]]
dim(out) <- c(length(xVarLevels), length(priceLevels)) # disagreeable on row / price on columns
myCol <- myColors(out, "blue", "green")
pdf(file.path(resultDir, paste("plot3D-", byVars[j], "-", outcomes[i], ".pdf", sep = ""))
, family = "CM Roman",
width = 4.5, height = 5)
par(mar=c(2,2,2,2)+0.1) # bottom, left, top, right in lines
# persp(disagree, priceLevels, join, col = color[facetcol],
persp(xVarLevels, priceLevels, out, col = myCol,
border = NA, theta = 50, phi = 30,
xlab = byVars.labels[j],
ylab = "Pay per HIT",
zlab = outcomes.labels[i],
ticktype = "detailed")
dev.off()
# gam and te lead to a lot of smoothing - trying loess as an alternative
modLoess <- loess(get(outcomes[i]) ~ price + byVar, span = 0.5, data = df)
outLoess <- matrix(fitted(modLoess), length(xVarLevels))
myCol <- myColors(outLoess, "blue", "green")
pdf(file.path(resultDir, paste("plot3D-", byVars[j], "-", outcomes[i], "-loess.pdf", sep = "")),
family = "CM Roman",
width = 4.5, height = 5)
par(mar=c(2,2,2,2)+0.1) # bottom, left, top, right in lines
persp(xVarLevels, priceLevels, outLoess, col = myCol,
border = NA, theta = 50, phi = 30,
xlab = byVars.labels[j],
ylab = "Pay per HIT",
zlab = outcomes.labels[i])
dev.off()
}
}
# Notes and other stuff
# RGL plot
#with(disagreeableJoin, plot3d(price, disagreeable, join), type=="s")
# Pretty, and interactive, but not easy to export
# persp3d(disagree, priceLevels, join, col = "green3")
# # Making a smoother version
# # Need to go back to original data to smooth
# # Based on http://stackoverflow.com/questions/20848740/smoothing-surface-plot-from-matrix
# mod <- gam(join ~ te(priceLevels, disagreeable), data = disagreeableJoin)
# joinMod <- matrix(fitted(mod), 6) # instead of the dim command above
# persp(disagree, priceLevels, joinMod, col = color[facetcol],
#       border = NA, theta = 50, phi = 30,
#       xlab = "Disagreeableness",
#       ylab = "Pay per HIT",
#       zlab = "Percent accept")
# # The below works fine, but does not allow for an easy way to do labels
# # Start looping over outcomes from here to end of file
# outcomes <- c("join", "joinPlus", "numHITs")
# outcomes.labels <- c("Work (%)", "Work 2+ (%)", "Number HITs")
# for (outcome in outcomes) {
#     out <- get('df')[[outcome]]
#     dim(out) <- c(6,10) # disagreeable on row / price on columns
#
#     priceLevels <- sort(unique(df$price))
#     xVarLevels  <- sort(unique(df$disagreeable))
#
#     # Static
#     myCol <- myColors(out, "blue", "green")
#
#     pdf(file.path(resultDir, paste("plot3D-disagreeable-", outcome, ".pdf", sep = ""))
#         , family = "CM Roman",
#         width = 4.5, height = 5)
#     par(mar=c(2,2,2,2)+0.1) # bottom, left, top, right in lines
#
#     # persp(disagree, priceLevels, join, col = color[facetcol],
#     persp(xVarLevels, priceLevels, out, col = myCol,
#           border = NA, theta = 50, phi = 30,
#           xlab = "Disagreeableness",
#           ylab = "Pay per HIT",
#           zlab = "Percent accept")
#     dev.off()
#
#     # gam and te lead to a lot of smoothing - trying loess as an alternative
#     modLoess <- loess(get(outcome) ~ price + disagreeable, span = 0.5, data = df)
#     outLoess <- matrix(fitted(modLoess), 6)
#
#     pdf(file.path(resultDir, paste("plot3D-disagreeable-", outcome, "-loess.pdf", sep = "")),
#         family = "CM Roman",
#         width = 4.5, height = 5)
#     par(mar=c(2,2,2,2)+0.1) # bottom, left, top, right in lines
#     persp(xVarLevels, priceLevels, outLoess, col = myCol,
#           border = NA, theta = 50, phi = 30,
#           xlab = "Disagreeableness",
#           ylab = "Pay per HIT",
#           zlab = "Percent accept")
#     dev.off()
# }
source('~/Dropbox/shared/compensating/data/genova/graph3D.R', echo=TRUE)
warnings()
setwd("~/projects/chapters/2017-oxford-handbook/code")
source('~/projects/chapters/2017-oxford-handbook/code/anGraphsTFR.R', echo=TRUE)
View(df)
tsdata <- ts(df,start=c(1967,1),frequency=1)
View(df)
# Graph for changes in TFR
# For Fertility Issues chapter in Oxford handbook
# Claus C Portner
# Begun.: 2017-02-10
# Edited: 2017-02-10
# short file paths - assuming work directory is "code"
dataDir <- "../data/Data_Extract_From_World_Development_Indicators"
figureDir <- "../figures"
# Data - extracted from World Bank WDI 2017-02-09
df <- read.csv(file.path(dataDir,"2017-02-09-wdi-extract.csv"))
# ehh something is weird here, seems to stop at 2013
tsdata <- ts(df,start=c(1967,1),frequency=1)
# Graph for changes in TFR
# For Fertility Issues chapter in Oxford handbook
# Claus C Portner
# Begun.: 2017-02-10
# Edited: 2017-02-10
# short file paths - assuming work directory is "code"
dataDir <- "../data/Data_Extract_From_World_Development_Indicators"
figureDir <- "../figures"
# Data - extracted from World Bank WDI 2017-02-09
df <- read.csv(file.path(dataDir,"2017-02-09-wdi-extract.csv"))
# ehh something is weird here, seems to stop at 2013
tsdata <- ts(df,start=c(1967,1),frequency=1)
install.packages("reshape2")
library(reshape2)
test <- melt(df, id.vars = c("Country.Name", "Country.Code"))
View(test)
test <- melt(df, id.vars = c("Country.Name", "Country.Code"), measure.vars = c("Series.Name", "Series.Code"))
View(test)
test <- melt(df, id.vars = c("Country.Name", "Country.Code"), variable.name = "Series.Code")
View(test)
df$Series.Name <- NULL
test <- melt(df, id.vars = c("Country.Name", "Country.Code"), variable.name = "Series.Code")
View(test)
test <- melt(df, id.vars = c("Country.Name", "Country.Code"))
View(test)
df <- read.csv(
file.path(dataDir,"2017-02-09-wdi-extract.csv"),
na.strings=c(".."))
test <- melt(df, id.vars = c("Country.Name", "Country.Code"))
View(test)
test <- melt(df, id.vars = c("Country.Name", "Country.Code"), variable.name = "Series.Code")
View(test)
df$Series.Name <- NULL
df$Country.Code <- NULL
test <- melt(df, id.vars = c("Country.Code", "Series.Code"))
df <- read.csv(
file.path(dataDir,"2017-02-09-wdi-extract.csv"),
na.strings=c(".."))
df$Country.Name <- NULL
df$Series.Name <- NULL
test <- melt(df, id.vars = c("Country.Code", "Series.Code"))
View(test)
install.packages("tidyr")
library(tidyr)
test <- gather(df, key, value, -Country.Code, -Series.Code)
test1 <- separate(test, key, into = c("y1,y2"), sep = "\.\.")
test1 <- separate(test, key, into = c("y1,y2"), sep = "\..")
test1 <- separate(test, key, into = c("y1,y2"), sep = "..")
View(test1)
test1 <- separate(test, key, into = c("y1","y2"), sep = "..")
test1 <- separate(test, key, into = c("y1","y2"), sep = 2)
test1 <- separate(test, key, into = c("y1","y2"), sep = 1)
test2 <- separate(test, y2, into = c("y1","y2"), sep = 4)
test2 <- separate(test1, y2, into = c("x1","x2"), sep = 4)
View(test2)
test2 <- separate(test1, y2, into = c("year","x2"), sep = 4)
test2$y1 <- NULL
test2$x2 <- NULL
test3 <- spread(test2, Series.Code, value)
View(test3)
test3$year <- as.numeric(test3$year)
# Graph for changes in TFR
# For Fertility Issues chapter in Oxford handbook
# Claus C Portner
# Begun.: 2017-02-10
# Edited: 2017-02-10
library(tidyr)
library(reshape2)
# short file paths - assuming work directory is "code"
dataDir <- "../data/Data_Extract_From_World_Development_Indicators"
figureDir <- "../figures"
# Data - extracted from World Bank WDI 2017-02-09 - need to reshape
# .. is missing in the original data
df <- read.csv(
file.path(dataDir,"2017-02-09-wdi-extract.csv"),
na.strings=c(".."))
# Tidying up data (need tidyr for that) - multistep process
test <- gather(df, key, value, -Country.Code, -Series.Code)
test1 <- separate(test, key, into = c("y1","y2"), sep = 1)
test2 <- separate(test1, y2, into = c("year","x2"), sep = 4)
test2$y1 <- NULL
test2$x2 <- NULL
test3 <- spread(test2, Series.Code, value)
df <- test3
df$year <- as.numeric(df$year)
# Graph for changes in TFR
# For Fertility Issues chapter in Oxford handbook
# Claus C Portner
# Begun.: 2017-02-10
# Edited: 2017-02-10
library(tidyr)
library(reshape2)
# short file paths - assuming work directory is "code"
dataDir <- "../data/Data_Extract_From_World_Development_Indicators"
figureDir <- "../figures"
# Data - extracted from World Bank WDI 2017-02-09 - need to reshape
# .. is missing in the original data
df <- read.csv(
file.path(dataDir,"2017-02-09-wdi-extract.csv"),
na.strings=c(".."))
View(df)
# Graph for changes in TFR
# For Fertility Issues chapter in Oxford handbook
# Claus C Portner
# Begun.: 2017-02-10
# Edited: 2017-02-10
library(tidyr)
library(reshape2)
# short file paths - assuming work directory is "code"
dataDir <- "../data/Data_Extract_From_World_Development_Indicators"
figureDir <- "../figures"
# Data - extracted from World Bank WDI 2017-02-09 - need to reshape
# .. is missing in the original data
df <- read.csv(
file.path(dataDir,"2017-02-09-wdi-extract.csv"),
na.strings=c(".."))
# Tidying up data (need tidyr for that) - multistep process
test <- gather(df, key, value, -Country.Code, -Series.Code)
test1 <- separate(test, key, into = c("y1","y2"), sep = 1)
test2 <- separate(test1, y2, into = c("year","x2"), sep = 4)
test2$y1 <- NULL
test2$x2 <- NULL
test3 <- spread(test2, Series.Code, value)
df <- test3
df$year <- as.numeric(df$year)
df$SH.DYN.MORT <- as.numeric(df$SH.DYN.MORT)
df$SH.DYN.MORT.FE <- as.numeric(df$SH.DYN.MORT.FE)
df$SH.DYN.MORT.MA <- as.numeric(df$SH.DYN.MORT.MA)
df$SP.ADO.TFRT <- as.numeric(df$SP.ADO.TFRT)
df$SP.DYN.TFRT.IN <- as.numeric(df$SP.DYN.TFRT.IN)
df$SP.DYN.WFRT <- as.numeric(df$SP.DYN.WFRT)
# Graph for changes in TFR
# For Fertility Issues chapter in Oxford handbook
# Claus C Portner
# Begun.: 2017-02-10
# Edited: 2017-02-10
library(tidyr)
library(reshape2)
# short file paths - assuming work directory is "code"
dataDir <- "../data/Data_Extract_From_World_Development_Indicators"
figureDir <- "../figures"
# Data - extracted from World Bank WDI 2017-02-09 - need to reshape
# .. is missing in the original data
df <- read.csv(
file.path(dataDir,"2017-02-09-wdi-extract.csv"),
na.strings=c(".."))
df$Country.Name <- NULL
df$Series.Name <- NULL
# Tidying up data (need tidyr for that) - multistep process
test <- gather(df, key, value, -Country.Code, -Series.Code)
test1 <- separate(test, key, into = c("y1","y2"), sep = 1)
test2 <- separate(test1, y2, into = c("year","x2"), sep = 4)
test2$y1 <- NULL
test2$x2 <- NULL
test3 <- spread(test2, Series.Code, value)
df <- test3
df$year <- as.numeric(df$year)
df$SH.DYN.MORT <- as.numeric(df$SH.DYN.MORT)
df$SH.DYN.MORT.FE <- as.numeric(df$SH.DYN.MORT.FE)
df$SH.DYN.MORT.MA <- as.numeric(df$SH.DYN.MORT.MA)
df$SP.ADO.TFRT <- as.numeric(df$SP.ADO.TFRT)
df$SP.DYN.TFRT.IN <- as.numeric(df$SP.DYN.TFRT.IN)
df$SP.DYN.WFRT <- as.numeric(df$SP.DYN.WFRT)
